# -*- coding: utf-8 -*-
"""Submission Terapan Rekomendasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zOms5fs4s6mPBnjGSsiG6DO7P9DmRT9_

# Load Data

## Import Library
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.metrics.pairwise import cosine_similarity

"""Mengimport library yang akan digunakan dalam project ini

## Import Data
"""

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('SpotifyFeatures.csv')

print("\nContoh Data : ")
print(df.head())

print("\nInfo Data :")
print(df.info())

print("\nJumlah baris & kolam data :")
print(df.shape)

print("\nDeskripsi Data : ")
print(df.describe())

print("\nTipe Data : ")
print(df.dtypes)

"""Menampilkan contoh data minimal 5 data, serta jumlah baris & kolom dan deskripsi hingga tipe data

# Persiapan Data yang Akan Digunakan
"""

df_data = df[['track_name', 'artist_name', 'genre', 'acousticness', 'danceability', 'energy', 'instrumentalness', 'liveness', 'loudness', 'speechiness', 'tempo', 'valence']].copy()

"""Mengelompokkan data kedalam df_data yang akan digunakan"""

df_data.drop_duplicates(inplace=True)

"""menghapus data duplikat"""

df_data.isnull().sum()

"""Melihat missing value data, dan ditemukan 1 missing value dalam kolom track_name"""

df_data.dropna(subset=['track_name'], inplace=True)

"""Manghapus missing value pada kolom track_name"""

df_data.isnull().sum()

"""Menampilkan hasil cek data yang sudah dibersihkan dan tidak ditemukan lagi ada nya missing value"""

df_sample = df_data.sample(n=1000, random_state=42).reset_index(drop=True)

"""Mengambil 1000 sample agar dapat mempercepat proses cosine similarity"""

audio_features = ['acousticness', 'danceability', 'energy',
                  'instrumentalness', 'liveness', 'loudness',
                  'speechiness', 'tempo', 'valence']

scaler = StandardScaler()
scaled_sample = scaler.fit_transform(df_sample[audio_features])
df_scaled_sample = pd.DataFrame(scaled_sample, columns=audio_features)

"""Melakukan Standarisasi pada fitur audio agar setiap fitur memiliki skala yang sebanding

## Cosine
"""

similarity_matrix = cosine_similarity(df_scaled_sample)

"""Menghitung kemiripan dengan matrix"""

# Fungsi merekomendasikan lagu berdasarkan judul lagu input
def recommend_song(song_title, df, similarity_matrix,  top_n=5):

    # Mencari lagu yang mirip
    match = df[df['track_name'].str.lower() == song_title.lower()]

    # Jika tidak ditemukan :
    if match.empty:
        print(f"No song found with title '{song_title}'.")
        return

    # Mengambil index lagu
    song_index = match.index[0]

    # Mengambil & Mengurutkan skor kemiripan
    similarity_scores = list(enumerate(similarity_matrix[song_index]))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)

    similarity_scores = similarity_scores[1:top_n+1]

    # Mengambil detail lagu yang mirip
    recommended = df.iloc[[i[0] for i in similarity_scores]][['track_name', 'artist_name', 'genre']]

    return recommended.reset_index(drop=True)

"""Fungsi rekomendasi lagu berdasarkan data yang di input oleh pengguna, dan hasil output akan menampilan 5 rekomendasi yang sesuai dengan kemiripan audio"""

df_sample['track_name'].sample(10, random_state=0)

"""Contoh sample data yang bisa digunakan untuk uji coba jalannya program"""

recommend_song("Hand It Over", df_sample, similarity_matrix)

"""Memanggil fungsi dan Menampilkan 5 data rekomendasi"""